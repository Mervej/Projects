Questions -
1. Most imp features - upload, download, file sync, notifications
2. Web, app ?
3. Type of files - all
4. Does files need to encrypted - Yes
5. Size limit - 10 gb
7. No of users - 10M DAU

Non functions requirement - Reliability(data loss not acceptable), Fast sync speed, Bandwidth usage, Scalability, High availability

Calculations - 
10M Day, 2 uploads per Day, 500KB avg file size, 1:1 read:write
QPS = (10M*2)/(24*3600) = 240
Peak QPS = 2*240

Basics -

Block server - Block servers upload blocks/files to cloud storage. 
        - A file can be split into several blocks, each with a unique hash value, stored in our metadata database
        - Each block is treated as an independent object and then encrypted and stored in our storage system (S3)
        - To reconstruct a file, blocks are joined in a particular order. 

    Algo for block - 
        - For large files that are updated regularly, sending the whole file on each update consumes a lot of bandwidth.
        - Delta sync: When a file is modified, only modified blocks are synced instead of the whole file using a sync algorithm 
        - Applying compression on blocks can significantly reduce the data size depending on file types. gzip for text 

Cloud storage(s3) - Stores the block in cloud        

            ------LoadBalaner------
Web server - auth user, user info, add/uppdate file metadata
Database - store user,login,file info(set up data replication and sharding )
Storage server - to store the files 
        - base_dir/user_1 - a bucket is created for each user
        - Name is kept same as the file, each file can be uniquely identified by relative_path + file_name
Notification service -

Database -
user - id, name, email
file_id - id, name, relative_path, user_id, 
device_id - id, user_id, push_noti_id
file_version - id, file_id, device_id, version
block - id, file_version_id, block_data


Uplod Flow --

Client 1 - request to api server and block server in parallel
    - api server /update-metadata -> change file_upload status to pending
    - notify to client that file is being updated

    - block server -> upload content of the file
    - Block servers chunk the files into blocks, compress, encrypt the blocks, and upload them to cloud storage.        
    - Once the file is uploaded, cloud storage triggers upload completion callback. The request is sent to API servers.
    - File status changed to “uploaded” in Metadata DB.
    - Notify the notification service that a file status is changed to “uploaded.


Download flow --
    - Notification service informs client 2 that a file is changed somewhere else.
    - Once client 2 knows that new updates are available, it sends a request to fetch metadata tp api server.
    - API servers call metadata DB to fetch metadata of the changes, metadata returned to client 2
    - it sends requests to block servers to download blocks.
    - Block servers first download blocks from cloud storage.
    - Client 2 downloads all the new blocks to reconstruct the file
